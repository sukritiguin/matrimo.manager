generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            Int           @id @default(autoincrement())
    name          String?
    username      String?
    email         String        @unique
    emailVerified DateTime?
    password      UserPassword?
    bio           String?
    verified      Boolean       @default(false)
    onBoarding    Boolean       @default(false)

    imageId Int?          @default(1)
    image   ProfileImage? @relation(fields: [imageId], references: [id])

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    account   Account[]
    sessions  Session[]
    event     Event[]
}

model UserPassword {
    hash   String
    userId Int    @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userAgent    String?
    ip           String?
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    revoked      Boolean  @default(false)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([userId])
    @@index([userId, sessionToken])
}

model VerificationToken {
    id         String   @id @default(uuid())
    type       String
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([identifier])
}

model Account {
    id                String  @id @default(cuid())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    providerEmail     String?
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@index([type])
}

model ProfileImage {
    id        Int      @id @default(autoincrement())
    url       String
    filename  String
    fileKey   String
    mimetype  String
    size      Int
    revoked   Boolean  @default(false)
    createdAt DateTime @default(now())

    user User[]
}

model Image {
    id        String   @id @default(cuid())
    url       String
    filename  String
    fileKey   String
    mimetype  String
    size      Int
    revoked   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    event Event[]
}

model Canvas {
    id    String  @id @default(cuid())
    title String?
    data  Json

    revoked   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    event     Event[]
}

enum EventType {
    WEDDING
    BIRTHDAY
    ANNIVERSARY
    RICE_CEREMONY
    CUSTOM
}

model EventCategory {
    id          Int       @id @default(autoincrement())
    name        String
    eventType   EventType
    customEvent String?
    events      Event[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Event {
    id          String   @id @default(uuid())
    title       String   @default("Untitled")
    description String?
    tags        String[]
    canvasId    String
    canvas      Canvas   @relation(fields: [canvasId], references: [id], onDelete: Cascade)
    images      Image[]
    ownerId     Int
    owner       User     @relation(fields: [ownerId], references: [id])

    isArchive Boolean @default(false)
    revoked   Boolean @default(false)

    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    categoryId Int
    category   EventCategory @relation(fields: [categoryId], references: [id])

    @@index([canvasId])
    @@index([ownerId, canvasId])
}
